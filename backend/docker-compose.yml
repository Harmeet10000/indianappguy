services:
  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - '80:8000'
    volumes:
      - ./nginx/http.conf:/etc/nginx/nginx.conf:ro
    # - ./certs:/etc/nginx/certs:ro  # Mount SSL certificates
    depends_on:
      auth-service-1:
        condition: service_healthy
      auth-service-2:
        condition: service_healthy
    networks:
      - auth-network
    restart: unless-stopped

  # Auth Service Instance 1
  auth-service-1:
    build:
      context: .
      dockerfile: docker/dev.Dockerfile
    container_name: auth-service-1
    ports:
      - '8000:8000'
    env_file:
      - .env.development
    environment:
      - SERVER_ID=auth-service-1
    depends_on:
      - redis
    restart: unless-stopped
    volumes:
      - ./src:/usr/src/backend-app/src
      - ./package.json:/usr/src/backend-app/package.json
      - ./pnpm-lock.yaml:/usr/src/backend-app/pnpm-lock.yaml
    networks:
      - auth-network
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'wget --no-verbose --tries=1 --spider http://localhost:8000/api/v1/health/self || exit 1'
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Auth Service Instance 2
  auth-service-2:
    build:
      context: .
      dockerfile: docker/dev.Dockerfile
    container_name: auth-service-2
    ports:
      - '8001:8000'
    env_file:
      - .env.development
    environment:
      - SERVER_ID=auth-service-2
    depends_on:
      - redis
    restart: unless-stopped
    volumes:
      - ./src:/usr/src/backend-app/src
      - ./package.json:/usr/src/backend-app/package.json
      - ./pnpm-lock.yaml:/usr/src/backend-app/pnpm-lock.yaml
    networks:
      - auth-network
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'wget --no-verbose --tries=1 --spider http://localhost:8000/api/v1/health/self || exit 1'
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # redis:
  #   image: redis:7-alpine
  #   container_name: redis
  #   ports:
  #     - '6379:6379'
  #   volumes:
  #     - redis_data:/data
  #   restart: unless-stopped
  #   networks:
  #     - auth-network

  # loki:
  #   image: grafana/loki:2.8.2
  #   container_name: loki
  #   ports:
  #     - '3100:3100'
  #   command: -config.file=/etc/loki/config.yaml
  #   volumes:
  #     - ./src/config/loki-config.yaml:/etc/loki/config.yaml
  #   restart: unless-stopped

  # promtail:
  #   image: grafana/promtail:2.8.2
  #   container_name: promtail
  #   volumes:
  #     - /var/log:/var/log # Mount host logs
  #     - ./src/config/promtail-config.yaml:/etc/promtail/config.yaml
  #   command: -config.file=/etc/promtail/config.yml
  #   restart: unless-stopped

  # prometheus:
  #   image: prom/prometheus
  #   container_name: prometheus
  #   volumes:
  #     - ./src/config/prometheus.yaml:/etc/prometheus/prometheus.yaml
  #   ports:
  #     - '9090:9090'
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yaml'
  #   restart: unless-stopped

  # grafana:
  #   image: grafana/grafana
  #   container_name: grafana
  #   ports:
  #     - '3000:3000'
  #   volumes:
  #     - grafana_data:/var/lib/grafana

  # dragonfly:
  #   image: docker.dragonflydb.io/dragonflydb/dragonfly:v1.27.1
  #   container_name: dragonfly
  #   network_mode: 'host'
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #   volumes:
  #     - dragonfly_data:/data
  #   restart: unless-stopped

networks:
  auth-network:
    driver: bridge

volumes:
  redis_data:
    driver: local
  dragonfly_data:
    driver: local
  grafana_data:
    driver: local
