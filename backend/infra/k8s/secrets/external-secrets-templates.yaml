# Database credentials external secret
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: database-credentials
  namespace: apps
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: database-credentials
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        url: 'postgresql://{{ .username }}:{{ .password }}@{{ .host }}:{{ .port }}/{{ .database }}'
        username: '{{ .username }}'
        password: '{{ .password }}'
        host: '{{ .host }}'
        port: '{{ .port }}'
        database: '{{ .database }}'
  data:
    - secretKey: username
      remoteRef:
        key: platform/database
        property: username
    - secretKey: password
      remoteRef:
        key: platform/database
        property: password
    - secretKey: host
      remoteRef:
        key: platform/database
        property: host
    - secretKey: port
      remoteRef:
        key: platform/database
        property: port
    - secretKey: database
      remoteRef:
        key: platform/database
        property: database
---
# Redis credentials external secret
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: redis-credentials
  namespace: apps
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: redis-credentials
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        url: 'redis://{{ .password }}@{{ .host }}:{{ .port }}'
        host: '{{ .host }}'
        port: '{{ .port }}'
        password: '{{ .password }}'
  data:
    - secretKey: host
      remoteRef:
        key: platform/redis
        property: host
    - secretKey: port
      remoteRef:
        key: platform/redis
        property: port
    - secretKey: password
      remoteRef:
        key: platform/redis
        property: password
---
# Pinecone API credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: pinecone-credentials
  namespace: apps
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: pinecone-credentials
    creationPolicy: Owner
  data:
    - secretKey: api-key
      remoteRef:
        key: platform/pinecone
        property: api_key
    - secretKey: environment
      remoteRef:
        key: platform/pinecone
        property: environment
    - secretKey: index-name
      remoteRef:
        key: platform/pinecone
        property: index_name
---
# Gemini API credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: gemini-credentials
  namespace: workers
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: gemini-credentials
    creationPolicy: Owner
  data:
    - secretKey: api-key
      remoteRef:
        key: platform/gemini
        property: api_key
---
# OpenSearch credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: opensearch-credentials
  namespace: workers
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: opensearch-credentials
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        endpoint: 'https://{{ .username }}:{{ .password }}@{{ .host }}:{{ .port }}'
        username: '{{ .username }}'
        password: '{{ .password }}'
        host: '{{ .host }}'
        port: '{{ .port }}'
  data:
    - secretKey: username
      remoteRef:
        key: platform/opensearch
        property: username
    - secretKey: password
      remoteRef:
        key: platform/opensearch
        property: password
    - secretKey: host
      remoteRef:
        key: platform/opensearch
        property: host
    - secretKey: port
      remoteRef:
        key: platform/opensearch
        property: port
---
# JWT signing keys
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: jwt-credentials
  namespace: apps
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: jwt-credentials
    creationPolicy: Owner
  data:
    - secretKey: access-token-secret
      remoteRef:
        key: platform/jwt
        property: access_token_secret
    - secretKey: refresh-token-secret
      remoteRef:
        key: platform/jwt
        property: refresh_token_secret
---
# TLS certificates
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: tls-certificates
  namespace: platform
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: platform-tls
    creationPolicy: Owner
    template:
      type: kubernetes.io/tls
      data:
        tls.crt: '{{ .certificate }}'
        tls.key: '{{ .private_key }}'
  data:
    - secretKey: certificate
      remoteRef:
        key: platform/tls
        property: certificate
    - secretKey: private_key
      remoteRef:
        key: platform/tls
        property: private_key
