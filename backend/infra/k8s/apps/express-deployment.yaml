# Express Application Deployment Configuration
apiVersion: v1
kind: ServiceAccount
metadata:
  name: express-sa
  namespace: apps
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::${AWS_ACCOUNT_ID}:role/express-service-role
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: express-config
  namespace: apps
data:
  NODE_ENV: 'production'
  LOG_LEVEL: 'info'
  API_VERSION: 'v1'
  CORS_ORIGINS: 'https://app.example.com,https://admin.example.com'
  SESSION_TIMEOUT: '3600'
  RATE_LIMIT_REQUESTS: '100'
  RATE_LIMIT_WINDOW: '60'
  BCRYPT_ROUNDS: '12'
  JWT_EXPIRES_IN: '24h'
  REFRESH_TOKEN_EXPIRES_IN: '7d'
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: express-app
  namespace: apps
  labels:
    app: express-app
    version: v1
    tier: application
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: express-app
  template:
    metadata:
      labels:
        app: express-app
        version: v1
        tier: application
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '3000'
        prometheus.io/path: '/metrics'
    spec:
      serviceAccountName: express-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      containers:
        - name: express
          image: ${ECR_REGISTRY}/express-app:${IMAGE_TAG}
          imagePullPolicy: Always
          ports:
            - containerPort: 3000
              name: http
              protocol: TCP
          env:
            - name: PORT
              value: '3000'
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: database-credentials
                  key: url
            - name: MONGODB_URI
              valueFrom:
                secretKeyRef:
                  name: mongodb-credentials
                  key: uri
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: redis-credentials
                  key: url
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: auth-credentials
                  key: jwt-secret
            - name: JWT_REFRESH_SECRET
              valueFrom:
                secretKeyRef:
                  name: auth-credentials
                  key: jwt-refresh-secret
            - name: ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: auth-credentials
                  key: encryption-key
            - name: GEMINI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: gemini-credentials
                  key: api-key
            - name: S3_BUCKET_NAME
              valueFrom:
                secretKeyRef:
                  name: s3-credentials
                  key: bucket-name
            - name: AWS_REGION
              value: 'us-west-2'
            - name: KAFKA_BOOTSTRAP_SERVERS
              valueFrom:
                secretKeyRef:
                  name: kafka-credentials
                  key: bootstrap-servers
            - name: NOVU_API_KEY
              valueFrom:
                secretKeyRef:
                  name: novu-credentials
                  key: api-key
            - name: RESEND_API_KEY
              valueFrom:
                secretKeyRef:
                  name: resend-credentials
                  key: api-key
            - name: STRIPE_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: stripe-credentials
                  key: secret-key
            - name: STRIPE_WEBHOOK_SECRET
              valueFrom:
                secretKeyRef:
                  name: stripe-credentials
                  key: webhook-secret
          envFrom:
            - configMapRef:
                name: express-config
          resources:
            requests:
              cpu: 200m
              memory: 384Mi
              ephemeral-storage: 1Gi
            limits:
              cpu: 750m
              memory: 768Mi
              ephemeral-storage: 2Gi
          livenessProbe:
            httpGet:
              path: /health
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /ready
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /health
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 30
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: app-logs
              mountPath: /app/logs
            - name: uploads
              mountPath: /app/uploads
      volumes:
        - name: tmp
          emptyDir: {}
        - name: app-logs
          emptyDir: {}
        - name: uploads
          emptyDir:
            sizeLimit: 1Gi
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: express-service
  namespace: apps
  labels:
    app: express-app
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 3000
      protocol: TCP
      name: http
  selector:
    app: express-app
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: express-hpa
  namespace: apps
  labels:
    app: express-app
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: express-app
  minReplicas: 3
  maxReplicas: 15
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
    - type: Pods
      pods:
        metric:
          name: http_request_duration_seconds
        target:
          type: AverageValue
          averageValue: '300m' # 300ms average response time
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
        - type: Pods
          value: 2
          periodSeconds: 60
      selectPolicy: Max
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: express-pdb
  namespace: apps
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: express-app
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: express-network-policy
  namespace: apps
spec:
  podSelector:
    matchLabels:
      app: express-app
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: platform
      ports:
        - protocol: TCP
          port: 3000
    - from:
        - namespaceSelector:
            matchLabels:
              name: infrastructure
      ports:
        - protocol: TCP
          port: 3000
  egress:
    - to: []
      ports:
        - protocol: TCP
          port: 5432 # PostgreSQL
        - protocol: TCP
          port: 27017 # MongoDB
        - protocol: TCP
          port: 6379 # Redis
        - protocol: TCP
          port: 443 # HTTPS (external APIs)
        - protocol: TCP
          port: 53 # DNS
        - protocol: UDP
          port: 53 # DNS
    - to:
        - namespaceSelector:
            matchLabels:
              name: workers
      ports:
        - protocol: TCP
          port: 8080 # Worker services
